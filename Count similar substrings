class Solution {
public:
bool isSimilar(const string& sub, const string& key) {
    if (sub == key) {
        return true; // Exact match
    }

    int n = sub.size();
    int mismatch_count = 0;

    // Find mismatch positions
    vector<int> mismatch_indices;
    for (int i = 0; i < n; ++i) {
        if (sub[i] != key[i]) {
            mismatch_count++;
            mismatch_indices.push_back(i);
            if (mismatch_count > 2) return false; // More than 2 mismatches
        }
    }

    // If exactly two mismatches, check if swapping makes them equal
    if (mismatch_count == 2) {
        int i = mismatch_indices[0], j = mismatch_indices[1];
        if (sub[i] == key[j] && sub[j] == key[i]) {
            return true; // The swap makes them similar
        }
    }

    return false;
}
  
int countSimilarSubstrings(string key, string text) {
int count = 0;
    int text_len = text.size();
    int key_len = key.size();

    // Iterate over all substrings of text of length equal to key
    for (int i = 0; i <= text_len - key_len; ++i) {
        string sub = text.substr(i, key_len); // Get the substring
        if (isSimilar(sub, key)) {
            count++; // Increment count if the substring is similar to key
        }
    }

    return count; // Return the final count
  }
};

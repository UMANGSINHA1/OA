int solution(vector<string> &R)
{
    // Get the dimensions of the grid
    int N = R.size();    // Number of rows
    int M = R[0].size(); // Number of columns

    // Initialize a 3D vector to keep track of visited squares.
    // Now, 3rd dimension will represent 4 directions (0: right, 1: down, 2: left, 3: up) to which movement is already performed
    vector<vector<vector<bool>>> visited(N, vector<vector<bool>>(M, vector<bool>(4, false)));

    // Initialize the robot's position and direction
    int x = 0; // Row index
    int y = 0; // Column index
    int d = 0; // Direction (0: right, 1: down, 2: left, 3: up)

    // Define the offsets for moving in each direction
    int dx[] = {0, 1, 0, -1};
    int dy[] = {1, 0, -1, 0};

    // Loop until the robot stops moving
    while (true)
    {
        // Try to move forward in the current direction
        int nx = x + dx[d];
        int ny = y + dy[d];

        // check if the current direction from the cell has already been visited or not
        if (visited[x][y][d])
        {
            // if yes then even if we move forward, we will get same result as it is in a loop
            break;
        }
        else
        {
            // Mark the current square with direction tried as visited
            visited[x][y][d] = true;

            // Check if the next square is valid and unoccupied
            if (nx >= 0 && nx < N && ny >= 0 && ny < M && R[nx][ny] == '.')
            {
                // Move to the next square
                x = nx;
                y = ny;
            }
            else
            {
                // Rotate 90 degrees clockwise
                d = (d + 1) % 4;
            }
        }
    }

    // Initialize the number of clean squares to zero
    int clean = 0;

    // Now get count of unique cells cleaned by robot
    // we can check this by iterating over visited 3D array where in each cell we will check if any 4 directions has true set
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (visited[i][j][0] || visited[i][j][1] || visited[i][j][2] || visited[i][j][3])
                clean++;
        }
    }

    return clean;
}

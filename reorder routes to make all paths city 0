#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        // Create a graph represented as an adjacency list where each edge also
        // has a boolean value indicating the direction of the edge.
        unordered_map<int, vector<pair<int, bool>>> graph;

        // Populate the graph with connections, including the reverse connection
        // but mark it as false to indicate it's not in the initial direction.
        for (auto& edge : connections) {
            int source = edge[0], destination = edge[1];
            graph[source].emplace_back(destination, true); // true for original direction
            graph[destination].emplace_back(source, false); // false for reverse
        }

        // Keep track of visited nodes to avoid revisiting them.
        vector<bool> visited(n, false);

        // Begin depth-first search from node 0. Accumulate the number of reorders along the path.
        return dfs(0, graph, visited);
    }

private:
    // Helper function to perform depth-first search.
    // It returns the count of edges that need to be reversed in order
    // to make all paths lead to city 0.
    int dfs(int currentNode, unordered_map<int, vector<pair<int, bool>>>& graph, vector<bool>& visited) {
        // Mark the current node as visited.
        visited[currentNode] = true;
      
        // Initialize the counter for the number of reorders at the current node.
        int reorderCount = 0;

        // Explore all the neighbors of the current node.
        for (auto& neighbor : graph[currentNode]) {
            int nextNode = neighbor.first;  // The neighboring city
            bool edgeDirection = neighbor.second; // True if edge is from currentNode -> nextNode
          
            // If the nextNode hasn't been visited, explore it.
            if (!visited[nextNode]) {
                // Increment reorder count if the current edge is in the wrong direction
                if (edgeDirection) {
                    reorderCount++;
                }
                // Recurse into the next node and add the reorders found there to the total count.
                reorderCount += dfs(nextNode, graph, visited);
            }
        }

        // Return the total reorder count for the current subtree.
        return reorderCount;
    }
};

int main() {
    Solution solver;
    vector<vector<int>> connections = {{0,1}, {1,3}, {2,3}, {4,0}, {4,5}};
    int result = solver.minReorder(6, connections);
    cout << "Number of roads to be reversed: " << result << endl;
    return 0;
}

#include <iostream>
#include <vector>
#include <queue>
#include <tuple>

using namespace std;

int solution(const vector<int>& dist, const vector<int>& comp, int p) {
    int res = 0;
    int total_comp = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> heap;

    // Push distances and competencies into the heap
    for (size_t i = 0; i < dist.size(); i++) {
        heap.emplace(dist[i], comp[i]);
    }

    // Process the heap
    while (!heap.empty()) {
        auto [d, c] = heap.top();
        heap.pop();

        if (total_comp + c < p) {
            total_comp += c;
            res += 1;
        } else {
            break;
        }
    }

    return res;
}

int main() {
    cout << solution({1, 4, 2, 5}, {4, 9, 2, 3}, 19) << endl; // Expected output: 4
    cout << solution({5, 11, 1, 3}, {6, 1, 3, 2}, 7) << endl; // Expected output: -2
    cout << solution({10, 15, 1}, {10, 1, 2}, 3) << endl; // Expected output: -1
    cout << solution({11, 18, 1}, {9, 18, 8}, 7) << endl; // Expected output: -0
    return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    int solution(vector<int>& A) {
        // One hole will need only 1 board
        if (A.size() == 1) return 1;

        sort(A.begin(), A.end());
        int lo = 1;
        int hi = A.back() - A.front();
        int result = -1;

        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (isPossible(A, mid)) {
                result = mid;
                hi = mid - 1; // Check for smaller board lengths
            } else {
                lo = mid + 1;
            }
        }

        return result;
    }

private:
    bool isPossible(const vector<int>& A, int boardLength) {
        int lastPosition = A[0];
        int boardsNeeded = 1;

        for (int i = 1; i < A.size(); i++) {
            if (A[i] - lastPosition > boardLength) {
                lastPosition = A[i];
                boardsNeeded++;
            }
        }
        // Check if at most 2 boards are needed
        return boardsNeeded <= 2 && A.back() - lastPosition <= boardLength;
    }
};

int main() {
    Solution solution;
    vector<int> A = {11, 20, 15};
    cout << solution.solution(A) << endl; // Example usage
    return 0;
}

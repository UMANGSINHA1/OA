#include<iostream>
#include<bits/stdc++.h>
using namespace std;


vector<vector<int>> houses = {{0,0,0,0},
                              {0,0,1,0},
                              {1,0,0,1}};

vector<vector<int>> dummy(3, vector<int> (4, INT32_MAX));

vector<vector<bool>> visited(3, vector<bool> (4, false));

vector<pair<int, int>> directions = {{0, -1}, {1, 0}, {-1, 0}, {0, 1}}; // Top Right Bottom Left

int k = 2;

bool legitimateDir(int x, int y) {
    if (x<0 || x>2 || y<0 || y>3) return false;
    return true;
}

void bfs(int i, int j) {
    queue<pair<int, int>> q;
    q.push({i, j});
    int level = 0;

    while(!q.empty()) {

        int size = q.size();
        
        level++;

        while(size--) {
            auto p = q.front();
            i = p.first;
            j = p.second;
            q.pop();
            for (int idx = 0; idx<4; idx++) {
                int x = i+directions[idx].second; 
                int y = j+directions[idx].first;
                if (legitimateDir(x, y) && !visited[x][y]) {
                    q.push({x, y});
                    visited[x][y] = 1;
                    if (dummy[x][y] == INT32_MAX) {
                        dummy[x][y] = level;
                    } else {
                        dummy[x][y] = max(level, dummy[x][y]);
                    }
                }
            }
        }
    }
}

int main() {

    unordered_map<int, int> mp;
    for (int i=0; i<houses.size(); i++) {
        for (int j=0; j<houses[i].size(); j++) {
            if (houses[i][j] == 1) {
                fill(visited.begin(), visited.end(), vector<bool> (4, false));

                visited[i][j] = 1;
                bfs(i, j);
            }
        }
    }
    for (int i=0; i<houses.size(); i++) {
        for (int j=0; j<houses[i].size(); j++) {
            cout<<dummy[i][j]<<" ";
        }
        cout<<"\n";
    }

    return 0;
}
